# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-14 12:51+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Panagiotis Skias <panagiotis.skias@gmail.com>\n"
"Language-Team: PyGreece <pygreece@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "Περισσότερα εργαλεία Ελέγχου Ροής"

#: tutorial/controlflow.rst:7
msgid ""
"As well as the :keyword:`while` statement just introduced, Python uses a few "
"more that we will encounter in this chapter."
msgstr ""
"Εκτός από τη πρόταση :keyword:`while` που μόλις εισήχθη, η Python χρησιμοποιεί μερικές ακόμη "
"που θα συναντήσουμε σε αυτό το κεφάλαιο."


#: tutorial/controlflow.rst:14
msgid ":keyword:`!if` Statements"
msgstr "Προτάσεις :keyword:`!if`"

#: tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr ""
"Ίσως ο πιο γνωστός τύπος δήλωσης είναι η πρόταση :keyword:`if`.  Για παράδειγμα::"

#: tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`!elif`' is short for 'else if', "
"and is useful to avoid excessive indentation.  An  :keyword:`!if` ... :"
"keyword:`!elif` ... :keyword:`!elif` ... sequence is a substitute for the "
"``switch`` or ``case`` statements found in other languages."
msgstr ""
"Μπορεί να υπάρχουν μηδέν ή περισσότερα μέρη :keyword:`elif` και το τμήμα "
":keyword:`else` είναι προαιρετικό.  To keyword ':keyword:`!elif`' είναι συντομογραφία του "
"'else if', και είναι χρήσιμη για να αποφύγετε την υπερβολίκή εσοχή.  Μια ακολουθία "
"keyword:`!if` ... :keyword:`!elif` ... :keyword:`!elif` ... είναι υποκατάστατο των δηλώσεων "
"``switch`` ή ``case`` που βρέθηκαν σε άλλες γλώσσες."

#: tutorial/controlflow.rst:39
msgid ""
"If you're comparing the same value to several constants, or checking for "
"specific types or attributes, you may also find the :keyword:`!match` "
"statement useful. For more details see :ref:`tut-match`."
msgstr ""
"Εάν συγκρίνετε την ίδια τιμή με πολλές σταθερές ή ελέγχετε για συγκεκριμένους τύπους ή χαρακτηριστικά, "
"μπορεί επίσης να βρείτε χρήσιμη τη δήλωση :keyword:`!match` "
"Για περισσότερες λεπτομέρειες, ανατρέξτε στο :ref:`tut-match`."

#: tutorial/controlflow.rst:46
msgid ":keyword:`!for` Statements"
msgstr "Προτάσεις :keyword:`!for`"

#: tutorial/controlflow.rst:51
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`!for` statement iterates over the items of any sequence (a list or "
"a string), in the order that they appear in the sequence.  For example (no "
"pun intended):"
msgstr ""
"Η δήλωση :keyword:`for` στην Python διαφέρει λίγο από αυτό που μπορεί να έχετε συνηθίσει "
"στη C ή στην Pascal.  Αντί να επαναλαμβάνετε πάντα μια αριθμητική πρόοδο αριθμών (όπως στη "
"Pascal) ή να δίνετε στον χρήστη τη δυνατότητα να ορίσει τόσο το βήμα επανάληψης όσο και τη συνθήκη διακοπής "
"(όπως C),η δήλωση της Python :keyword:`!for` επαναλαμβάνεται πάνω από τα στοιχεία οποιασδήπτοε ακολουθίας "
"(λίστας ή συμβολοσειράς), με τη σειρά που εμφανίζονται στην ακολουθία.  Για παράδειγμα (χωρίς λογοπαίγνιο)::"

#: tutorial/controlflow.rst:72
msgid ""
"Code that modifies a collection while iterating over that same collection "
"can be tricky to get right.  Instead, it is usually more straight-forward to "
"loop over a copy of the collection or to create a new collection::"
msgstr ""
"Ο κώδικας που τροποποιεί μια συλλογή ενώ επαναλαμβάνεται πάνω από την ίδια συλλογή μπορεί να είναι δύσκολος "
"για να γίνει σωστός.  Αντίθετα, είναι συνήθως πιο απλό να κάνετε loop πάνω από ένα αντίγραφο συλλογής ή να "
"δημιουργήσετε μια νέα συλλογή::"

#: tutorial/controlflow.rst:94
msgid "The :func:`range` Function"
msgstr "Η συνάρτηση :func:`range`"

#: tutorial/controlflow.rst:96
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates arithmetic progressions::"
msgstr ""
"Εάν χρειάζεται να κάνετε επανάληψη σε μια ακολουθία αριθμών, η ενσωματωμένη συνάρτηση "
":func:`range` είναι χρήσιμη.  Δημιουργεί αριθμητικές προόδους::"

#: tutorial/controlflow.rst:108
msgid ""
"The given end point is never part of the generated sequence; ``range(10)`` "
"generates 10 values, the legal indices for items of a sequence of length "
"10.  It is possible to let the range start at another number, or to specify "
"a different increment (even negative; sometimes this is called the 'step')::"
msgstr ""
"Το δεδομένο τελικό σημείο δεν αποτελεί ποτέ μέρος της παραγόμενης ακολουθίας· το "
"``range(10)`` δημιουργεί 10 τιμές, τους δείκτες για στοιχεία μιας ακολοθίας μήκους 10.  "
"Είναι δυνατόν να αφήσουμε το εύρος να ξεκινά από άλλο αριθμό ή για να καθορίσετε μια διαφορετική "
"προσαύξηση (ακόμη και αρνητική, μερικές φορές αυτό ονομάζεται 'βήμα')::"

#: tutorial/controlflow.rst:122
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"Για να γίνουν iterrate οι δείκτες μια ακολουθίας, μπορείτε να συνδυάσετε τις :func:`range` "
"και :func:`len` ως εξής::"

#: tutorial/controlflow.rst:135
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"Στις περισσότερες τέτοιες περιπτώσεις, ωστόσο, είναι βολικό να χρησιμοποιήσετε τη συνάρτηση "
":func:`enumerate`, δείτε :ref:`tut-loopidioms`."

#: tutorial/controlflow.rst:138
msgid "A strange thing happens if you just print a range::"
msgstr "Ένα περιέργο πράγμα συμβαίνει αν απλώς εκτυπώσετε ένα range::"

#: tutorial/controlflow.rst:143
msgid ""
"In many ways the object returned by :func:`range` behaves as if it is a "
"list, but in fact it isn't. It is an object which returns the successive "
"items of the desired sequence when you iterate over it, but it doesn't "
"really make the list, thus saving space."
msgstr ""
"Με πολλούς τρόπους το αντικείμενο που επιστρέφεται από το :func:`range` συμπεριφέρεται σαν να είναι "
"μια λίστα, αλλά στην πραγματικότητα δεν είναι. Είναι ένα αντικείμενο που επιστρέφει τα διαδοχικά στοιχεία "
"της επιθυμητής ακολουθίας όταν κάνετε επανάληψη πάνω του, αλλά δεν μπαίνει πραγματικά στη λίστα, "
"εξοικονομώντας έτσι χώρο."

#: tutorial/controlflow.rst:148
msgid ""
"We say such an object is :term:`iterable`, that is, suitable as a target for "
"functions and constructs that expect something from which they can obtain "
"successive items until the supply is exhausted.  We have seen that the :"
"keyword:`for` statement is such a construct, while an example of a function "
"that takes an iterable is :func:`sum`::"
msgstr ""
"Λέμε ότι ένα τέτοιο αντικείμενο είναι :term:`iterable`, δηλαδή, κατάλληλο ως "
"στόχος για συναρτήσεις και κατασκευές που περιμένουν κάτι από το οποίο μπορούν να λάβουν "
"διαδοχικά στοιχεία μέχρι να εξαντληθεί η προσφορά.  Είδαμε ότι η δήλωση :"
"keyword:`for` είναι μια τέτοια κατασκευή, ενώ ένα παράδειγμα συνάρτησης που παίρνει ένα "
"iterable είναι :func:`sum`::"

#: tutorial/controlflow.rst:157
msgid ""
"Later we will see more functions that return iterables and take iterables as "
"arguments.  In chapter :ref:`tut-structures`, we will discuss in more detail "
"about :func:`list`."
msgstr ""
"Αργότερα θα δούμε περισσότερες συναρτήσεις που επιστρέφουν iterables και λαμβάνουν τους "
"iterables ως ορίσματα.  Στο κεφάλαιο :ref:`tut-structures`, θα συζητήσουμε λεπτομερέστερα για το "
":func:`list`."

#: tutorial/controlflow.rst:164
msgid ""
":keyword:`!break` and :keyword:`!continue` Statements, and :keyword:`!else` "
"Clauses on Loops"
msgstr ""
":keyword:`!break` και :keyword:`!continue` Προτάσεις, και :keyword:`!else` "
"Προτάσεις για Loops"

#: tutorial/controlflow.rst:166
msgid ""
"The :keyword:`break` statement breaks out of the innermost enclosing :"
"keyword:`for` or :keyword:`while` loop."
msgstr ""
"Η δήλωση :keyword:`break` ξεφεύγει από τον πιο εσωτερικό βρόχο :"
"keyword:`for` ή :keyword:`while`."

#: tutorial/controlflow.rst:169
msgid ""
"A :keyword:`!for` or :keyword:`!while` loop can include an :keyword:`!else` "
"clause."
msgstr ""
"Ένας βρόχος :keyword:`!for` ή :keyword:`!while` μπορεί να περιλαμβάνει μια πρόταση "
":keyword:`!else`."

#: tutorial/controlflow.rst:171
msgid ""
"In a :keyword:`for` loop, the :keyword:`!else` clause is executed after the "
"loop reaches its final iteration."
msgstr ""
"Σε έναν βρόχο :keyword:`for`, η πρόταση :keyword:`!else` εκτελείται αφού ο βρόχος φτάσει στην τελική του "
"επανάληψη."

#: tutorial/controlflow.rst:174
msgid ""
"In a :keyword:`while` loop, it's executed after the loop's condition becomes "
"false."
msgstr ""
"Σε έναν βρόχο :keyword:`while`, εκτελείται αφού η συνθήκη του βρόχου είναι ψευδής."

#: tutorial/controlflow.rst:176
msgid ""
"In either kind of loop, the :keyword:`!else` clause is **not** executed if "
"the loop was terminated by a :keyword:`break`."
msgstr ""
"Σε οποιοδήποτε είδος βρόχου, η πρόταση :keyword:`!else` **δεν** εκτελείται εάν ο βρόχος "
"τερματίστηκε με μια λέξη :keyword:`break`."

#: tutorial/controlflow.rst:179
msgid ""
"This is exemplified in the following :keyword:`!for` loop, which searches "
"for prime numbers::"
msgstr ""
"Αυτό αποδεικνύεται στον ακόλουθο βρόχο :keyword:`!for`, που αναζητά πρώτους αριθμούς::"

#: tutorial/controlflow.rst:200
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"(Ναι, αυτός είναι ο σωστός κώδικας.  Κοιτάξτε προσεκτικά: η πρόταση ``else`` ανήκει "
"στον βρόχο :keyword:`for`, **όχι** στη δήλωση :keyword:`if`.)"

#: tutorial/controlflow.rst:203
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does with that of :"
"keyword:`if` statements: a :keyword:`try` statement's ``else`` clause runs "
"when no exception occurs, and a loop's ``else`` clause runs when no "
"``break`` occurs. For more on the :keyword:`!try` statement and exceptions, "
"see :ref:`tut-handling`."
msgstr ""
"Όταν χρησιμοποιείται με έναν βρόχο, η πρόταση ``else`` έχει περισσότερα κοινά με την πρόταση "
"``else`` μιας πρότασης :keyword:`try` παρά με αυτήν των δηλώσεων keyword:`if`: η πρόταση "
"``else`` μιας δήλωσης :keyword:`try` εκτελείται όταν δεν υπάρχει εξαίρεση, και η πρόταση ``else`` "
"ενός βρόχου εκτελείται όταν δεν υπάρχει ``break``. Για περισσότερα με τη δήλωση :keyword:`!try` και τις εξαιρέσεις, "
"δείτε :ref:`tut-handling`."

#: tutorial/controlflow.rst:210
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
"Η δήλωση :keyword:`continue`, επίσης δανεισμένη από τη C, συνεχίζεται με την επόμενη επανάληψη του βρόχου::"

#: tutorial/controlflow.rst:231
msgid ":keyword:`!pass` Statements"
msgstr "Προτάσεις :keyword:`!pass`"

#: tutorial/controlflow.rst:233
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
"Η δήλωση :keyword:`pass` δεν κάνει τίποτα. Μπορεί να χρησιμοποιηθεί όταν απαιτείται συντακτικά μια πρόταση, αλλά "
"το πρόγραμμα δεν απαιτεί καμία ενέργεια. Για παράδειγμα::"

#: tutorial/controlflow.rst:240
msgid "This is commonly used for creating minimal classes::"
msgstr "Αυτό χρησιμοποιείται συνήθως για τη δημιουργία ελάχιστων κλάσεων::"

#: tutorial/controlflow.rst:246
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`!pass` is silently "
"ignored::"
msgstr ""
"Ένα άλλο μέρος :keyword:`pass` που μπορεί να χρησιμοποιηθεί είναι ως place-holder για μια "
"συνάρτηση ή το σώμα υπό όρους όταν εργάζεστε σε νέο κώδικα, επιτρέποντας σας να συνεχίσετε "
"να σκέφτεστε σε ένα πιο αφηρημένο επίπεδο.  Το :keyword:`!pass` αγνοείται σιωπηλά::"

#: tutorial/controlflow.rst:258
msgid ":keyword:`!match` Statements"
msgstr "Προτάσεις :keyword:`!match`"

#: tutorial/controlflow.rst:260
msgid ""
"A :keyword:`match` statement takes an expression and compares its value to "
"successive patterns given as one or more case blocks.  This is superficially "
"similar to a switch statement in C, Java or JavaScript (and many other "
"languages), but it's more similar to pattern matching in languages like Rust "
"or Haskell. Only the first pattern that matches gets executed and it can "
"also extract components (sequence elements or object attributes) from the "
"value into variables."
msgstr ""
"Μια δήλωση :keyword:`match` παίρνει μια έκφραση και συγκρίνει την τιμή της με διαδοχικά μοτίβα "
"που δίνονται ως ένα ή περισσότερα μπλοκ πεζών-κεφαλαίων.  Αυτή είναι επιφανειακά παρόμοια με μια πρόταση "
"switch στην C, Java ή JavaScript (και πολλές άλλες γλώσσες), αλλά είναι πιο παρόμοια με την αντιστοίχιση "
"προτύπων σε γλώσσες όπως η Rust ή η Haskell. Εκτελείται μόνο το πρώτο μοτίβο που ταιριάζει και μπορεί επίσης "
"να εξαγάγει στοιχεία (στοιχεία ακολουθίας ή ιδιότητες αντικειμένου) από την τιμή σε μεταβλητές."

#: tutorial/controlflow.rst:268
msgid ""
"The simplest form compares a subject value against one or more literals::"
msgstr ""
"Η απλούστερη φόρμα συγκρίνει μια τιμή θέματος με ένα ή περισσότερα literals::"

#: tutorial/controlflow.rst:281
msgid ""
"Note the last block: the \"variable name\" ``_`` acts as a *wildcard* and "
"never fails to match. If no case matches, none of the branches is executed."
msgstr ""
"Σημειώστε το τελευταίο μπλοκ: το \"όνομα μεταβλητής\" ``_`` λειτουργεί ως *μπαλαντέρ* και δεν "
"αποτυγχάνει ποτέ να ταιριάζει. Εάν δεν ταιριάζει κανένα case, κανένας από τους κλάδους δεν εκτελείται."

#: tutorial/controlflow.rst:284
msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr ""
"Μπορείτε να συνδυάσετε πολλά γράμματα σε ένα μόνο μοτίβο χρησιμοποιώντας το ``|`` (\"ή\")::"

#: tutorial/controlflow.rst:289
msgid ""
"Patterns can look like unpacking assignments, and can be used to bind "
"variables::"
msgstr ""
"Τα μοτίβα μπορεί να μοιάζουν με αναθέσεις unpacking, και μπορούν αν χρησιμοποιηθούν για τη σύνδεση μεταβλητών::"

#: tutorial/controlflow.rst:305
msgid ""
"Study that one carefully!  The first pattern has two literals, and can be "
"thought of as an extension of the literal pattern shown above.  But the next "
"two patterns combine a literal and a variable, and the variable *binds* a "
"value from the subject (``point``).  The fourth pattern captures two values, "
"which makes it conceptually similar to the unpacking assignment ``(x, y) = "
"point``."
msgstr ""
"Μελετήστε το ένα προσεκτικά!  Το πρώτο μοτίβο έχει δύο literals, και μπορεί να θεωρηθεί ως "
"επέκταση του literal μοτίβου που φαίνεται παραπάνω.  Αλλά τα επόμενα δύο μοτίβα συνδυάζουν ένα "
"literal σε μια μεταβλητή, και η μεταβλητή *δεσμεύει* μια τιμή από το θέμα (``point``).  Το τέταρτο "
"μοτίβο συλλαμβάνει δύο τιμές, γεγονός που το κάνει εννοιολογικά παρόμοιο με την ανάθεση unpacking "
"``(x, y) = point``."

#: tutorial/controlflow.rst:312
msgid ""
"If you are using classes to structure your data you can use the class name "
"followed by an argument list resembling a constructor, but with the ability "
"to capture attributes into variables::"
msgstr ""
"Εάν χρησιμοποιείτε κλάσεις για τη δομή των δεδομένων σας, μπορείτε να χρησιμοποιήσετε το όνομα της κλάσης "
"ακολουθούμενο από μια λίστα ορισμάτων που μοιάζει με έναν κατασκευαστή, αλλά με τη δυνατότητα να συλλαμβάνει "
"χαρακτηριστικά σε μεταβλητές::"

#: tutorial/controlflow.rst:334
msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"Μπορείτε να χρησιμοποιήσετε παραμέτρους θέσης με ορισμένες ενσωματωμένες κλάσεις που παρέχουν "
"μια σειρά για τα χαρακτηριστικά τους (π.χ. κλάσεις δεδομένων). Μπορείτε επίσης να ορίσετε μια συγκεκριμένη θέση "
"για χαρακτηριστικά σε μοτίβα ορίζοντας το ειδικό χαρακτηριστικό ``__match_args__`` στις κλάσεις σας. Εάν έχει οριστεί "
"σε (\"x\", \"y\"), τα ακόλουθα μοτίβα είναι όλα ισοδύναμα (και όλα δεσμεύουν το χαρακτηριστικό ``y`` "
"στη μεταβλητή ``var``)::"

#: tutorial/controlflow.rst:345
msgid ""
"A recommended way to read patterns is to look at them as an extended form of "
"what you would put on the left of an assignment, to understand which "
"variables would be set to what. Only the standalone names (like ``var`` "
"above) are assigned to by a match statement. Dotted names (like ``foo."
"bar``), attribute names (the ``x=`` and ``y=`` above) or class names "
"(recognized by the \"(...)\" next to them like ``Point`` above) are never "
"assigned to."
msgstr ""
"Ένα συνιστώμενος τρόπος για να διαβάσετε τα μοτίβα είναι να τα δείτε ως μια εκτεταμένη μορφή αυτού που θα "
"βάλετε στα αριστερά μιας εργασίας, για να κατανοήσετε ποιες μεταβλητές θα οριστούν σε τι. Μόνο τα ανεξάρτητα ονόματα "
"(όπως ``var`` παραπάνω) εκχωρούνται από μια δήλωση αντιστοίχισης. Ονόματα με κουκκίδες (όπως ``foo."
"bar``), ονόματα χαρακτηριστικών (τα ``x=`` και ``y=`` παραπάνω) ή ονόματα κλάσεων "
"(αναγνωρίζονται από το \"(...)\" που βρίσκεται δίπλα όπως το ``Point`` παραπάνω) δεν ανατίθενται ποτέ."

#: tutorial/controlflow.rst:352
msgid ""
"Patterns can be arbitrarily nested.  For example, if we have a short list of "
"Points, with ``__match_args__`` added, we could match it like this::"
msgstr ""
"Τα μοτίβα μπορούν να είναι αυθαίρετα ένθετα.  Για παράδειγμα, εάν έχουμε μια σύντομη λίστα "
"με Points, με προσθήκη ``__match_args__``, θα μπορούσαμε να την αντιστοιχίσουμε ως εξής::"

#: tutorial/controlflow.rst:373
msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"Μπορούμε να προσθέσουμε μια πρόταση ``if`` σε ένα μοτίβο, γνωστό ως \"guard\".  Εάν το guard είναι "
"false, το ``match`` συνεχίζει για να δοκιμάσει το επόμενο μπλοκ πεζών-κεφαλαίων.  Λάβετε υπόψη ότι η σύλληψη "
"της τιμής γίνεται πριν ο guard αξιολογείθεί::"

#: tutorial/controlflow.rst:383
msgid "Several other key features of this statement:"
msgstr "Πολλά άλλα βασικά χαρακτηριστικά αυτής της δήλωσης:"

#: tutorial/controlflow.rst:385
msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences.  An important exception is "
"that they don't match iterators or strings."
msgstr ""
"Όπως το unpacking αναθέσεων, τα μοτίβα πλειάδας (tuple) και λίστας έχουν ακριβώς την ίδια "
"σημασία και ταιριάζουν πραγματικά με αυθαίρετες ακολουθίες.  Μια σημαντική εξαίρεση είναι ότι δεν ταιριάζουν "
"με iterators ή συμβολοσειρές."

#: tutorial/controlflow.rst:389
msgid ""
"Sequence patterns support extended unpacking: ``[x, y, *rest]`` and ``(x, y, "
"*rest)`` work similar to unpacking assignments.  The name after ``*`` may "
"also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two items "
"without binding the remaining items."
msgstr ""
"Τα μοτίβα ακολουθίας υποστηρίζουν εκτεταμένο unpacking: ``[x, y, *rest]`` και ``(x, y, "
"*rest)`` λειτουργεί παρόμοια με το unpacing αναθέσεων.  Το όνομα μετά το ``*`` μπορεί επίσης "
"να είναι ``_``, οπότε το ``(x, y, *_)`` αντιστοιχεί σε μια ακολουθία τουλάχιστον δύο στοιχείων "
"χωρίς να δεσμεύει τα υπόλοιπα στοιχεία."

#: tutorial/controlflow.rst:394
msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dictionary.  Unlike "
"sequence patterns, extra keys are ignored.  An unpacking like ``**rest`` is "
"also supported.  (But ``**_`` would be redundant, so it is not allowed.)"
msgstr ""
"Μοτίβα αντιστοίχισης: ``{\"bandwidth\": b, \"latency\": l}`` καταγράφει τις τιμές "
"``\"bandwidth\"`` και ``\"latency\"`` από ένα λεξικό.  Σε αντίθεση με τα μοτίβα ακολοθίας, "
"επιπλεόν κλειδιά αγνοούνται.  Υποστηρίζεται επίσης ο unpacking όπως το ``**rest``.  (Αλλά το "
"``**_`` θα ήταν περιττό, επομένως δεν επιτρέπεται.)"

#: tutorial/controlflow.rst:399
msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "Τα δευτερεύονται μοτίβα μπορούν αν αποτυπωθούν χρησιμοποιώντας το "
"keyword ``as``::"

#: tutorial/controlflow.rst:403
msgid ""
"will capture the second element of the input as ``p2`` (as long as the input "
"is a sequence of two points)"
msgstr ""
"θα καταγράψει το δεύτερο στοιχείο της εισόδου ως ``p2`` (εφόσον η είσοδος είναι μια "
"ακολουθία δύο σημείων)"

#: tutorial/controlflow.rst:406
msgid ""
"Most literals are compared by equality, however the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"Τα περισσότερα literals συγκρίνονται με ισότητα, ωστόσο τα singletons ``True``, "
"``False`` και ``None`` συγκρίνονται με ταυτότητα."

#: tutorial/controlflow.rst:409
msgid ""
"Patterns may use named constants.  These must be dotted names to prevent "
"them from being interpreted as capture variable::"
msgstr ""
"Τα μοτίβα μπορούν να χρησιμοποιούν ονομασμένες σταθερές.  Αυτά πρέπει να είναι ονόματα με "
"κουκκίδες για να μην ερμηνεύονται ως capture μεταβλητή::"

#: tutorial/controlflow.rst:428
msgid ""
"For a more detailed explanation and additional examples, you can look into :"
"pep:`636` which is written in a tutorial format."
msgstr ""
"Για πιο λεπτομερή επεξήγηση και πρόσθετα παραδείγματα, μπορείτε να δείτε το :"
"pep:`636` το οποίο είναι γραμμένο σε μορφή εκμάθησης."

#: tutorial/controlflow.rst:434
msgid "Defining Functions"
msgstr "Καθορισμός Συναρτήσεων"

#: tutorial/controlflow.rst:436
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"Μπορούμε να δημιουργήσουμε μια συνάρτηση που γράφει τη σειρά Fibonacci σε ένα "
"αυθαίρετο όριο::"

#: tutorial/controlflow.rst:456
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
"Το keyword :keyword:`def` εισάγει μια συνάρτηση *ορισμός*.  Πρέπει να ακολουθείται από το "
"όνομα της συνάρτησης και τη λίστα των τυπικών παραμέτρων σε παρένθεση. Οι δηλώσεις που σχηματίζουν "
"το σώμα της συνάρτησης ξεκινούν από την επόμενη γρμμή και πρέπει να είναι εσοχές."

#: tutorial/controlflow.rst:461
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"Η πρώτη δήλωση του σώματος της συνάρτησης μπορεί προαιρετικά να είναι ένα literal "
"συμβολοσειράς· αυτό το literal συμβολοσειράς είναι η συμβολοσειρά τεκμηρίωσης  της συνάρτησης "
"ή :dfn:`docstring`. (Περισσότερα για τα docstring μπορείτε να βρείτε στην ενότητα :ref:`tut-"
"docstrings`.) Υπάρχουν εργαλεία που χρησιμοποιούν docstrings για την αυτόματη παραγωγή διαδικτυακής ή "
"έντυπης τεκμηρίωσης ή για να αφήσουν τον χρήστη να περιηγηθεί διαδραστικά στον κώδικα· είναι καλή "
"πρακτική να συμπεριλαμβάνονται docstrings στον κώδικα που γράφετε, για αυτό κάντε το συνήθεια."

#: tutorial/controlflow.rst:468
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables and variables of "
"enclosing functions cannot be directly assigned a value within a function "
"(unless, for global variables, named in a :keyword:`global` statement, or, "
"for variables of enclosing functions, named in a :keyword:`nonlocal` "
"statement), although they may be referenced."
msgstr ""
"Η *εκτέλεση* μιας συνάρτησης εισάγει έναν νέο πίνακα συμβόλων που χρησιμοποιείται "
"για τις τοπικές μεταβλητές της συνάρτησης.  Πιο συγκεκριμένα, όλες οι εκχωρήσεις μεταβλητών "
"σε μια συνάρτηση αποθηκεύουν την τιμή στον πίνακα τοπικών συμβόλων, ενώ οι αναφορές μεταβλητών "
"κοιτάζονται πρώτα στον πίνακα τοπικών συμβόλων, στη συνέχιας στους πίνακες τοπικών συμβόλων των "
"συναρτήσεων που περικλείουν, μετά στον πίνακα καθολικών συμβόλων και, τέλος, στον πίνακα ενσωματωμένων "
"ονομάτων.  Έτσι, οι καθολικές μεταβλητές και οι μεταβλητές των συναρτήσεων που περικλείουν δεν μπορούν "
"να εκχωρηθούν ως μια τιμή μέσα σε μια συνάρτηση (εκτός εάν, για καθολικές μεταβλητές, που ονομάζονται σε "
"μια δήλωση :keyword:`global` ή, για μεταβλητές συναρτήσεων που περικλείουν, ονομάζονται ως μια δήλωση "
":keyword:`nonlocal`), αν και μπορεί να αναφέρονται."

#: tutorial/controlflow.rst:479
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, or calls itself recursively, a new local symbol table is "
"created for that call."
msgstr ""
"Οι πραγματικές παράμετροι (ορίσματα) σε μια κλήση συνάρτησης εισάγονται στον τοπικό πίνακα "
"συμβόλων ης καλούμενης συνάρτησης όταν αυτή καλείται· έτσι, τα ορίσματα μεταβιβάζονται χρησιμοποιώντας "
"*call by value* (όπου η *value* είναι πάντα ένα αντικείμενο *reference*, όχι την τιμή του αντικειμένου). "
"[#]_ Όταν μια συνάρτηση καλεί μια άλλη συνάρτηση ή καλεί τον εαυτό της αναδρομικά, δημιουργείται ένας νέος πίνακας "
"τοπικών συμβόλων για αυτήν την κλήση."

#: tutorial/controlflow.rst:486
msgid ""
"A function definition associates the function name with the function object "
"in the current symbol table.  The interpreter recognizes the object pointed "
"to by that name as a user-defined function.  Other names can also point to "
"that same function object and can also be used to access the function::"
msgstr ""
"Ένας ορισμός συνάρτησης συσχετίζει το όνομα της συνάρτησης με το αντικείμενο συνάρτησης στον "
"τρέχοντα πίνακα συμβόλων.  Ο διερμηνέας αναγνωρίζει το αντικείμενο στο οποίο επισημαίνεται αυτό το "
"όνομα ως συνάρτηση που ορίζεται από τον χρήστη.  Άλλα όνοματα μπορούν επίσης να δείχνουν το ίδιο αντικείμενο "
"συνάρτησης και μπορούν επίσης να χρησιμοποιηθούν για πρόσβαση στη συνάρτηση::"

#: tutorial/controlflow.rst:497
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :func:"
"`print`::"
msgstr ""
"Προερχόμενοι από άλλες γλώσσες, μπορεί να αντιταχθείτε ότι το ``fib`` δεν είναι μια "
"συνάρτηση αλλά μια διαδικασία, καθώς δεν επιστρέφει μια τιμή.  Στην πραγματικότητα, ακόμη και "
"συναρτήσεις χωρίς δήλωση :keyword:`return` επιστρέφουν μια τιμή, αν και μάλλον βαρετό.  Αυτή η τιμή "
"ονομάζεται ``None``.  Η εγγραφή της τιμής ``None`` από τον διερμηνέα, εάν θα ήταν η μόνη τιμή "
"που γράφεται.  Μπορείτε να το δείτε αν το θέλετε πραγματικά χρησιμοποιώντας τη :func:"
"`print`::"

#: tutorial/controlflow.rst:508
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"Είανι απλό να γράψετε μια συνάρτηση που επιστρέφει μια λίστα με τους αριθμούς της σειράς "
"Fibonacci, αντί να την εκτυπώσετε::"

#: tutorial/controlflow.rst:524
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "Αυτό το παράδειγμα, ως συνήθως, δείχνει μερικά νέα χαρακτηριστικά Python:"

#: tutorial/controlflow.rst:526
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`!return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
"Η δήλωση :keyword:`return` επιστρέφει με μια τιμή από μια συνάρτηση. Το :"
"keyword:`!return` χωρίς όρισμα έκφρασης, επιστρέφει το ``None``. Η πτώση "
"του τέλους μιας συνάρτησης επιστρέφει επίσης ``None``."

#: tutorial/controlflow.rst:530
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`!append` shown in the example is "
"defined for list objects; it adds a new element at the end of the list.  In "
"this example it is equivalent to ``result = result + [a]``, but more "
"efficient."
msgstr ""
"Η δήλωση ``result.append(a)`` καλεί μια *μέθοδο* του αντικειμένου της λίστας "
"``result``.  Μια μέθοδος είναι μια συνάρτηση που 'ανήκει' σε ένα αντικείμενο και ονομάζεται "
"``obj.methodname``, όπου ``obj`` είναι κάποιο αντικείμενο (αυτό μπορεί να έιναι μια έκφραση), "
"και το ``methodname`` είναι το όνομα μιας μεθόδου που ορίζεται από τον τύπο του αντικειμένου. "
"Διαφορετικοί τύποι ορίζουν διαφορετικές μεθόδους.  Μέθοδοι διαφορετικών τύπων μπορεί να έχουν "
"το ίδιο όνομα χωρίς να προκαλούν ασάφεια.  (Είναι δυνατό να ορίσετε τους δικούς σας τύπους αντικειμένων και "
"μεθόδους, χρησιμοποιώντας *classes*, δείτε :ref:`tut-classes`) Η μέθοδος :meth:`!append` που εμφανίζεται "
"στο παράδειγμα ορίζεται για αντικείμενα λίστας· προσθέτει ένα νέο στοιχείο στο τέλος της λίστας.  Σε "
"αυτό το παράδειγμα είναι ισοδύναμο με ``result = result + [a]``, αλλά πιο αποτελεσματικό."

#: tutorial/controlflow.rst:545
msgid "More on Defining Functions"
msgstr "Περισσότερο για τον Καθορισμό Συναρτήσεων"

#: tutorial/controlflow.rst:547
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"Είναι επίσης δυνατός ο ορισμός συναρτήσεων με μεταβλητό αριθμό ορισμάτων. "
"Υπάρχουν τρεις μορφές, που μπορούν να συνδυαστούν."

#: tutorial/controlflow.rst:554
msgid "Default Argument Values"
msgstr "Προεπιλεγμένες Τιμές Ορίσματος"

#: tutorial/controlflow.rst:556
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"Η πιο χρήσιμη φόρμα είναι να καθορίσετε μια προεπιλεγμένη τιμή για ένα ή περισσότερα ορίσματα. "
"Αυτό δημιουργεί μια συνάρτηση που μπορεί να κληθεί με λιγότερα ορίσματα από αυτά που έχει ορίσει ότι "
"επιτρέπει.  Για παράδειγμα::"

#: tutorial/controlflow.rst:572
msgid "This function can be called in several ways:"
msgstr "Αυτή η συνάρτηση μπορεί να κληθεί με διάφορους τρόπους:"

#: tutorial/controlflow.rst:574
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr ""
"δίνοτνας μόνο το υποχρεωικκό όρισμα: ``ask_ok('Do you really want to quit?')``"

#: tutorial/controlflow.rst:576
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"δίνοντας ένα από τα προαιρετικά ορίσματα: ``ask_ok('OK to overwrite the file?', "
"2)``"

#: tutorial/controlflow.rst:578
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"ή δίνοντας όλα τα ορίσματα: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"

#: tutorial/controlflow.rst:581
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"Αυτό το παράδειγμα εισάγει επίσης το keyword :keyword:`in`. Αυτό ελέγχει εάν μια "
"ακολουθία περιέχει ή όχι μια συγκεκριμένη τιμή."

#: tutorial/controlflow.rst:584
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"Οι προεπιλεγμένες τιμές αξιολογούνται στο σημείο του ορισμού της συνάρτησης στο "
"πεδίο που *ορίζεται*, έτσι ώστε ::"

#: tutorial/controlflow.rst:595
msgid "will print ``5``."
msgstr "θα εκτυπώσει ``5``."

#: tutorial/controlflow.rst:597
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**Σημαντική προειδοποίηση:**  Η προεπιλεγμένη τιμή αξιολογείται μόνο μία φορά. Αυτό "
"κάνει τη διαφορά όταν η προεπιλογή είναι ένα μεταβλητό αντικείμενο, όπως μια λίστα, λεξικό ή "
"στιγμιότυπα των περισσότερων κλάσεων.  Για παράδειγμα, η ακόλουθη συνάρτηση συσσωρεύει "
"τα ορίσματα που διαβάζονται σε αυτό σε επόμενες κλήσεις::"

#: tutorial/controlflow.rst:610
msgid "This will print ::"
msgstr "Αυτό θα εκτυπώσει ::"

#: tutorial/controlflow.rst:616
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"Εάν δεν θέλετε να γίνεται κοινή χρήση της προεπιλογής μεταξύ των επόμενων κλήσεων, μπορείτε "
"να γράψετε τη συνάρτηση ως εξής::"

#: tutorial/controlflow.rst:629
msgid "Keyword Arguments"
msgstr "Ορίσματα Keyword"

#: tutorial/controlflow.rst:631
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"Οι συναρτήσεις μπορούν επίσης να κληθούν χρησιμοποιώντας το :term:`keyword arguments <keyword "
"argument>` της μορφής ``kwarg=value``.  Για παράδειγμα, την ακόλουθη συνάρτηση::"

#: tutorial/controlflow.rst:640
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"δέχεται ένα απαιτούμενο όρισμα (``voltage``) και τρία προαιρετικά ορίσματα "
"(``state``, ``action``, και ``type``).  Αυτή η συνάρτηση μπορεί να κληθεί με οποιονδήποτε "
"από τους ακόλουθους τρόπους::"

#: tutorial/controlflow.rst:651
msgid "but all the following calls would be invalid::"
msgstr "αλλά όλες οι ακόλουθες κλήσεις θα ήταν άκυρες::"

#: tutorial/controlflow.rst:658
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"Σε μια κλήση συνάρτησης, τα keyword ορίσματα πρέπει να ακολουθούν ορίσματα θέσης. Όλα "
"τα keyword ορίσματα που διαβάζονται πρέπει να ταιριάζουν με ένα από τα ορίσματα που γίνονται "
"δεκτά από τη συνάρτηση (π.χ. το ``actor`` δεν είναι έγκυρο όρισμα για τη συνάρτηση ``parrot``), "
"και η διάταξη τους δεν είναι σημαντική.  Αυτό περιλαμβάνει επίσης μη "
"προαιρετικά ορίσματα (π.χ. ``parrot(voltage=1000)`` είναι επίσης έγκυρο). Κανένα όρισμα "
"δεν μπορεί να λάβει μια τιμή περισσότερες από μία φορές. Ακολουθεί ένα παράδειγμα που αποτυγχάνει "
"λόγω αυτού του περιορισμού::"

#: tutorial/controlflow.rst:674
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a :ref:`tuple <tut-tuples>` containing the "
"positional arguments beyond the formal parameter list.  (``*name`` must "
"occur before ``**name``.) For example, if we define a function like this::"
msgstr ""
"Όταν υπάρχει μια τελική επίσημη παράμετρος της μορφής ``**name``, λαμάνει ένα λεξικό "
"(δείτε :ref:`typesmapping`) που περιέχει όλα τα keyword ορίσματα εκτός από αυτά που "
"αντιστοιχούν σε μια επίσημη παράμετρο.  Αυτό μπορεί να συνδυαστεί με μια επίσημη παράμετρος "
"της μοφής ``*name`` (που περιγράφεται στην επόμενη υποενότητα) η οποία λαμβάνει ένα "
":ref:`tuple <tut-tuples>` που περιέχει τα ορίσματα θέσης πέρα από την επίσημη λίστα παραμέτρων.  "
"(Το ``*name`` πρέπει να εφμανίζεται πριν από το ``**name``.) Για παράδειγμα, αν ορίσουμε μια "
"συνάρτηση όπως αυτή::"

#: tutorial/controlflow.rst:691
msgid "It could be called like this::"
msgstr "Μπορεί να καλεστεί κάπως έτσι::"

#: tutorial/controlflow.rst:699
msgid "and of course it would print:"
msgstr "και φυσικά θα εκτυπώσει:"

#: tutorial/controlflow.rst:712
msgid ""
"Note that the order in which the keyword arguments are printed is guaranteed "
"to match the order in which they were provided in the function call."
msgstr ""
"Λάβετε υπόψη ότι η σειρά με την οποία εκτυπώνονται τα keyword ορίσματα είναι εγγυημένη "
"ότι ταιριάζει με τη σειρά με την οποία δόθηκαν στην κλήση της συνάρτησης."

#: tutorial/controlflow.rst:716
msgid "Special parameters"
msgstr "Ειδικές παράμετροι"

#: tutorial/controlflow.rst:718
msgid ""
"By default, arguments may be passed to a Python function either by position "
"or explicitly by keyword. For readability and performance, it makes sense to "
"restrict the way arguments can be passed so that a developer need only look "
"at the function definition to determine if items are passed by position, by "
"position or keyword, or by keyword."
msgstr ""
"Από προεπιλογή, τα ορίσματα μπορούν να μεταβιβαστούν σε μια συνάρτηση Python είτε με βάση "
"τη θέση είτε ρητά με το keyword. Για αναγνωσιμότητα και απόδοση, ειναι λογικό να περιοριστεί "
"ο τρόπος με τον οποίο μπορούν να περάσουν τα ορίσματα, έτσι ώστε ένας προγραμματιστής να μην "
"χρειάζεται να κοιτάξει το ορισμό της συνάρτησης για να προσδιορίσει εάν τα στοιχεία μεταβιβάζονται "
"κατά θέση, κατά θέση ή keyword, ή κατά keyword."

#: tutorial/controlflow.rst:724
msgid "A function definition may look like:"
msgstr "Ένας ορισμός συνάρτησης μπορεί να μοιάζει με αυτό:"

#: tutorial/controlflow.rst:735
msgid ""
"where ``/`` and ``*`` are optional. If used, these symbols indicate the kind "
"of parameter by how the arguments may be passed to the function: positional-"
"only, positional-or-keyword, and keyword-only. Keyword parameters are also "
"referred to as named parameters."
msgstr ""
"όπου τα ``/`` και ``*`` είναι προαιρτικά. Εάν χρησιμοποιούνται, αυτά τα σύμβολα υποδεικνύουν "
"το είδος της παραμέτρους με τον τρόπο που τα ορίσματα μπορούν να μεταβιβαστούν στη συνάρτηση: "
"μόνο θέσης (positional-only), θέσης ή keyword (positional-or-keyword), και μόνο keyword (keyword-only). "
"Οι keyword παράμετροι αναφέρονται επίσης ως ονομασμένες παράμετροι."

#: tutorial/controlflow.rst:742
msgid "Positional-or-Keyword Arguments"
msgstr "Παράμετροι Θέσης ή Keyword"

#: tutorial/controlflow.rst:744
msgid ""
"If ``/`` and ``*`` are not present in the function definition, arguments may "
"be passed to a function by position or by keyword."
msgstr ""
"Εάν τα ``/`` και ``*`` δεν υπάρχουν στον ορισμό της συνάρτησης, τα ορίσματα μπορούν να μεταβιβαστούν "
"σε μια συνάρτηση ανά θέση ή κατά keyword."

#: tutorial/controlflow.rst:749
msgid "Positional-Only Parameters"
msgstr "Παράμετροι Μόνο-Θέσης"

#: tutorial/controlflow.rst:751
msgid ""
"Looking at this in a bit more detail, it is possible to mark certain "
"parameters as *positional-only*. If *positional-only*, the parameters' order "
"matters, and the parameters cannot be passed by keyword. Positional-only "
"parameters are placed before a ``/`` (forward-slash). The ``/`` is used to "
"logically separate the positional-only parameters from the rest of the "
"parameters. If there is no ``/`` in the function definition, there are no "
"positional-only parameters."
msgstr ""
"Επανεξετάζοντας αυτό το θέμα λίγο πιο λεπτομερώς, είναι δυνατό να επισημάνετε "
"ορισμένες παραμέτρους ως *μόνο θέσης*.Εάν *μόνο θέσης*, η σειρά των παραμέτρων έχει σημασία "
"και οι παράμετροι δεν μπορούν να μεταβιβαστούν με keyword. Οι παράμετροι μόνο θέσης τοποθετούνται "
"πριν από ένα ``/`` (προς τα εμπρός-κάθετος). Το ``/``χρησιμοποιείται για να διαχωρίσει λογικά τις "
"παραμέτρους μόνο θέσης από τις υπόλοιπες παραμέτρους. Εάν δεν υπάερχει το ``/`` στον ορισμό της "
"συνάρτησης, δεν υπάρχουν παράμετροι μόνο θέσης."

#: tutorial/controlflow.rst:759
msgid ""
"Parameters following the ``/`` may be *positional-or-keyword* or *keyword-"
"only*."
msgstr ""
"Οι παράμετροι που ακολουθούν το ``/`` μπορεί να είναι *θέσης ή keyword* ή *μόνο keyword*."

#: tutorial/controlflow.rst:763
msgid "Keyword-Only Arguments"
msgstr "Ορίσματα μόνο Keyword"

#: tutorial/controlflow.rst:765
msgid ""
"To mark parameters as *keyword-only*, indicating the parameters must be "
"passed by keyword argument, place an ``*`` in the arguments list just before "
"the first *keyword-only* parameter."
msgstr ""
"Για να επισημάνετε τις παραμέτρους ως *μόνο keyword*, υποδεικνύοντας ότι οι παράμετροι πρέπει "
"να περάσουν από το keyword όρισμα, τοποθετήσετε ένα ``*`` στη λίστα ορισμάτων ακριβώς πριν "
"από την πρώτη παράμετρο *μόνο keyword*."

#: tutorial/controlflow.rst:771
msgid "Function Examples"
msgstr "Παραδείγματα Συναρτήσεων"

#: tutorial/controlflow.rst:773
msgid ""
"Consider the following example function definitions paying close attention "
"to the markers ``/`` and ``*``::"
msgstr ""
"Σκεφτείτε τα ακόλουθα παραδείγματα ορισμών συναρτήσεων δίνοντας ιδιαίτερη "
"προσοχή στους δείκτες ``/`` και ``*``::"

#: tutorial/controlflow.rst:789
msgid ""
"The first function definition, ``standard_arg``, the most familiar form, "
"places no restrictions on the calling convention and arguments may be passed "
"by position or keyword::"
msgstr ""
"Ο πρώτος ορισμός συνάρτησης, ``standard_arg``, η πιο οικεία μορφή, δεν θέτει περιορισμούς "
"στη σύμβαση κλήσης και τα ορίσματα μπορούν να περάσουν από θέση ή από keyword::"

#: tutorial/controlflow.rst:799
msgid ""
"The second function ``pos_only_arg`` is restricted to only use positional "
"parameters as there is a ``/`` in the function definition::"
msgstr ""
"Η δεύτερη συνάρτηση ``pos_only_arg`` περιορίζεται στη χρήση μόνο παραμέτρων θέσης καθώς "
"υπάρχει ένα ``/`` στον ορισμός της συνάρτησης::"

#: tutorial/controlflow.rst:810
msgid ""
"The third function ``kwd_only_args`` only allows keyword arguments as "
"indicated by a ``*`` in the function definition::"
msgstr ""
"Η τρίτη συνάρτηση ``kwd_only_args`` επιτρέπει μόνο keyword ορίσματα όπως "
"υποδεικνύεται από ένα ``*`` στον ορισμός της συνάρτησης::"

#: tutorial/controlflow.rst:821
msgid ""
"And the last uses all three calling conventions in the same function "
"definition::"
msgstr ""
"Και το τελευταίο χρησιμοποιεί και τις τρεις συμβάσεις κλήσης στον ίδιο ορισμό "
"συνάρτησης::"

#: tutorial/controlflow.rst:841
msgid ""
"Finally, consider this function definition which has a potential collision "
"between the positional argument ``name``  and ``**kwds`` which has ``name`` "
"as a key::"
msgstr ""
"Τέλος, εξετάστε αυτόν τον ορισμό συνάρτησης που έχει μια πιθανή σύγκρουση μεταξύ "
"του ορίσματος θέσης ``name``  και ``**kwds`` που έχει ως κλειδί το ``name``::"

#: tutorial/controlflow.rst:846
msgid ""
"There is no possible call that will make it return ``True`` as the keyword "
"``'name'`` will always bind to the first parameter. For example::"
msgstr ""
"Δεν υπάρχει καμία πιθανή κλήση που θα την κάνεινα επιστρέψει ``True`` καθώς το keyword "
"``'name'`` θα συνδέεται πάντα με την πρώτη παράμετρο. Για παράδειγμα::"

#: tutorial/controlflow.rst:855
msgid ""
"But using ``/`` (positional only arguments), it is possible since it allows "
"``name`` as a positional argument and ``'name'`` as a key in the keyword "
"arguments::"
msgstr ""
"Αλλά χρησιμοποιώντας ``/`` (ορίσματα μόνο θέσης), είναι δυνατό καθώς επιτρέπει το ``name`` "
"ως όρισμα θέσης και το ``'name'`` ως κλειδί στα keyword ορίσματα::"

#: tutorial/controlflow.rst:863
msgid ""
"In other words, the names of positional-only parameters can be used in "
"``**kwds`` without ambiguity."
msgstr ""
"Με άλλα λόγια, τα ονόματα των παραμέτρων μόνο θέσης μπορούν να χρησιμοποιηθούν σε ``**kwds`` "
"χωρίς ασάφεια."

#: tutorial/controlflow.rst:868
msgid "Recap"
msgstr "Ανακεφαλαίωση"

#: tutorial/controlflow.rst:870
msgid ""
"The use case will determine which parameters to use in the function "
"definition::"
msgstr ""
"Η περίπτωση χρήσης θα καθορίσει ποιες παραμέτρους θα χρησιμοποιηθούν στον ορισμό της συνάρτησης::"

#: tutorial/controlflow.rst:874
msgid "As guidance:"
msgstr "Ως καθοδήγηση:"

#: tutorial/controlflow.rst:876
msgid ""
"Use positional-only if you want the name of the parameters to not be "
"available to the user. This is useful when parameter names have no real "
"meaning, if you want to enforce the order of the arguments when the function "
"is called or if you need to take some positional parameters and arbitrary "
"keywords."
msgstr ""
"Χρησιμοποιήστε τη θέση μόνο εάν θέλετε το όνομα των παραμέτρων να μην είναι διαθέσιμο στο χρήστη. "
"Αυτό είναι χρήσιμο όταν τα ονόματα παραμέτρων δεν έχουν πραγματικό νόημα, εάν δεν θέλετε να "
"επιβάλετε τη σειρά των ορισμάτων όταν καλείται η συνάρτηση ή εάν πρέπει να ληφθούν ορισμένες παράμετροι "
"θέσης και αυθαίρετα keywords."

#: tutorial/controlflow.rst:881
msgid ""
"Use keyword-only when names have meaning and the function definition is more "
"understandable by being explicit with names or you want to prevent users "
"relying on the position of the argument being passed."
msgstr ""
"Χρησιμοποιήστε keyword μόνο όταν τα ονόματα έχουν νόημα και ο ορισμός της συνάρτησης "
"είναι πιο κατανοητός όταν είναι ρητός με ονόματα ή θέλετε να αποτρέψετε τους χρήστες να βασίζονται "
"στη θέση του επιχειρήματος που μεταβιβάζεται."

#: tutorial/controlflow.rst:884
msgid ""
"For an API, use positional-only to prevent breaking API changes if the "
"parameter's name is modified in the future."
msgstr ""
"Για ένα API, χρησιμοποιήστε το μόνο θέσης για να αποτρέψετε τη διακοπή των αλλαγών "
"τους API, εάν το όνομα της παραμέτρου τροποποιηθεί στο μέλλον."

#: tutorial/controlflow.rst:890
msgid "Arbitrary Argument Lists"
msgstr "Λίστες Αυθαίρετων Ορισμάτων"

#: tutorial/controlflow.rst:895
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"Τέλος, η λιγότερο συχνά χρησιμοποιούμενη επιλογή είναι να ορίσετε ότι μια συνάρτηση "
"μπορεί να κληθεί μεέναν αυθαίρετο αριθμός ορισμάτων.  Αυτά τα ορίσματα θα τυλιχθούν σε μια "
"πλειάδα (tuple) (βλ. :ref:`tut-tuples`).  Πριν από τον μεταβλητό αριθμό ορισμάτων ενδέχεται "
"να προκύψουν μηδέν ή περισσότερα κανονικά ορίσματα. ::"

#: tutorial/controlflow.rst:904
msgid ""
"Normally, these *variadic* arguments will be last in the list of formal "
"parameters, because they scoop up all remaining input arguments that are "
"passed to the function. Any formal parameters which occur after the "
"``*args`` parameter are 'keyword-only' arguments, meaning that they can only "
"be used as keywords rather than positional arguments. ::"
msgstr ""
"Κανονικά, αυτά τα *variadic* ορίσματα θα είναι τελευταία στη λίστα των επίσημων "
"παραμέτρων, επειδή συλλέγουν όλα τα υπόλοιπα ορίσματα εισόδου που μεταβιβάζονται στη "
"συνάρτηση. Οποιεσδήποτε τυπικές παράμετροι που εμφανίζονται μετά την παράμετρο "
"``*args`` είναι 'μόνο keyword' ορίσματα, που σημαίνει ότι μπορούν να χρησιμοποιηθούν μόνο ως "
"λέξεις-κλειδιά και όχι ως ορίσματα θέσης. ::"

#: tutorial/controlflow.rst:921
msgid "Unpacking Argument Lists"
msgstr "Unpacking Λίστες Ορισμάτων"

#: tutorial/controlflow.rst:923
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"Η αντίστροφη κατάσταση συμβαίνει όταν τα ορίσματα βρίσκονται ήδη σε μια λίστα ή "
"πλειάδα (tuple), αλλά πρέπει να αποσυμπιεστούν για μια κλήση συνάρτησης που απαιτεί "
"ξεχωριστά ορίσματα θέσης.  Για παράδειγμα, η ενσωματωμένη (built-in) συνάρτηση :func:`range` "
"αναμένει ξεχωριστά *start* και *stop* ορισματα.  Εάν δεν είναι διαθέσιμα ξεχωριστά, γράψτε την κλήση "
"συνάρτησης με τον ``*``\\ -τελεστή για να αποσυμπιέσετε τα ορίσματα από μια λίστα ή "
"πλειάδα (tuple)::"

#: tutorial/controlflow.rst:939
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"Με τον ίδιο τρόπο, τα λεξικά μπορούν αν παραδίδουν keyword ορίσματα με τον "
"``**``\\ -τελεστη::"

#: tutorial/controlflow.rst:955
msgid "Lambda Expressions"
msgstr "Εκφράσεις Lambda"

#: tutorial/controlflow.rst:957
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"Μπορούν αν δημιουργηθούν μικρές ανώνυμες συναρτήσεις με το keyword :keyword:`lambda`. "
"Αυτή η συνάρτηση επιστρέφει το άθροισμα των δύο ορισμάτων της: ``lambda a, b: a+b``. "
"Οι συναρτήσεις Lambda μπορούν να χρησιμοποιηθούν όπου απαιτούνται αντικείμενα συνάρτησης. "
"Περιορίζονται συντακικά σε μία μόνο έκφραση.  Σημασιολογικά, είναι απλώς syntactic sugar "
"για έναν ορισμό κανονικής συνάρτησης.  Όπως οι ορισμοί ένθετων  συναρτήσεων, οι συναρτήσεις "
"lambda μπορούν να παραπέμπουν σε μεταβλητές από το πεδίο που περιέχει::"

#: tutorial/controlflow.rst:974
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"Το παραπάνω παράδειγμα χρησιμοποιεί μια έκφραση lambda για να επιστρέψει μια συνάρτηση.  Μια άλλη "
"χρήση είναι η μετάδοση μιας μικρής συνάρτησης ως όρισμα::"

#: tutorial/controlflow.rst:986
msgid "Documentation Strings"
msgstr "Συμβολοσειρές Τεκμηρίωσης"

#: tutorial/controlflow.rst:993
msgid ""
"Here are some conventions about the content and formatting of documentation "
"strings."
msgstr ""
"Ακολουθούν ορισμένες συμβάσεις σχετικάμε το περιεχόμενο και τη μορφοποίηση των συμβολοσειρών τεκμηρίωσης."

#: tutorial/controlflow.rst:996
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""

#: tutorial/controlflow.rst:1002
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"Εάν υπάρχουν περισσότερες γραμμές στη συμβολοσειρά τεκμηρίωσης, η δεύτερη γραμμήθα πρέπει "
"να είναι κενή, διαχωρίζοντας οπτικά τη σύνοψη από την υπόλοιπη περιγραφή.  Οι ακόλουθες γραμμές "
"πρέπει να είναι μία ή περισσότερες παραγράφοι που περιγράφουν τις συμβάσεις κλήσης του αντικειμένου, "
"τις παρενέργειές του κ.λπ.."

#: tutorial/controlflow.rst:1007
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Ο parser της Python δεν αφαιρεί την εσοχή από τα literals της συμβολοσειράς πολλών "
"γραμμών στην Python, επομένως τα εργαλεία που επεξεργάζονται την τεκμηρίωση πρέπει "
"να αφαιρέσουν την εσοχή εάν είναι επιθυμητό.  Αυτό γίνεται χρησιμοπιοώντας την ακόλουθη "
"σύμβαση. Η πρώτη μη κενή γραμμή *μετά* την πρώτη γραμμή της συμβολοσειράς καθορίζει το "
"μέγεθος της εσοχής για ολόκληρη τη συμβολοσειρά τεκμηρίωσης.  (Δεν μπορούμε να χρησιμοποιήσουμε "
"την πρώτη γραμμή αφού είναι γενικά δίπλα στα εισαγωγικά της συμβολοσειράς, επομένως η εσοχή της δεν "
"είναι εμφανής στο literal της συμβολοσειράς.) Το κενό διάστημα "
"\"ισοδύναμο\" σε αυτήν την εσοχή αφαιρείται στη συνέχεια από την αρχή όλων των γραμμών της "
"συμβολοσειράς.  Οι γραμμές που έχουν μικρότερη εσοχή δεν θα πρέπει να εμφανίζονται, αλλά αν εμφανιστούν "
"θα πρέπει να αφαιρεθεί όλο το αρχικό κενό τους.  Η ισοδυναμία των κενών διαστημάτων θα πρέπει να "
"ελέγχεται μετά την επέκταση των καρτελών (σε 8 κενά, κανονικά)."

#: tutorial/controlflow.rst:1019
msgid "Here is an example of a multi-line docstring::"
msgstr "Ακολουθεί ένα παράδειγμα νεός πολλαπλών γραμμών docstring::"

#: tutorial/controlflow.rst:1037
msgid "Function Annotations"
msgstr "Annotations Συναρτήσεων"

#: tutorial/controlflow.rst:1045
msgid ""
":ref:`Function annotations <function>` are completely optional metadata "
"information about the types used by user-defined functions (see :pep:`3107` "
"and :pep:`484` for more information)."
msgstr ""
"Το :ref:`Function annotations <function>` είναι εντελώς προαιρετικές πληροφοριές "
"μεταδεδομένων σχετικά με τους τύπους χρησιμοποιούνται από συναρτήσεις που καθορίζονται "
"από το χρήστη (δείτε :pep:`3107` "
"και :pep:`484` για περισσότερες πληροφορίες)."

#: tutorial/controlflow.rst:1049
msgid ""
":term:`Annotations <function annotation>` are stored in the :attr:`!"
"__annotations__` attribute of the function as a dictionary and have no "
"effect on any other part of the function.  Parameter annotations are defined "
"by a colon after the parameter name, followed by an expression evaluating to "
"the value of the annotation.  Return annotations are defined by a literal ``-"
">``, followed by an expression, between the parameter list and the colon "
"denoting the end of the :keyword:`def` statement.  The following example has "
"a required argument, an optional argument, and the return value annotated::"
msgstr ""
"Το :term:`Annotations <function annotation>` αποθηκεύονται στο χαρακτηριστικό "
":attr:`!__annotations__` της συνάρτησης ως λεξικό και δεν έχουνε καμία επίδραση σε κανένα άλλο "
"μέρος της συνάρτησης.  Τα annotations των παραμέτρων ορίζονται με άνω και κάτω τελεία "
"μετά το όνομα παραμέτρου, ακολουθούμενη από μια έκφραση που αξιλογεί την τιμή του annotation.  "
"Τα annotaions επιστροφής ορίζονται από ένα literal ``->``, ακολοθούμενο από μια έκφραση, μεταξύ "
"της λίστας παραμέτρων και της άνω και κάτω τελείας που υποδηλώνει το τέλος της δήλωσης :keyword:`def`.  "
"Το ακόλουθο παράδειγμα έχει ένα απαιτούμενο όρισμα, ένα προαιρετικό όρισμα και την επιστρεφόμενη τιμή σε "
"annotations::"

#: tutorial/controlflow.rst:1071
msgid "Intermezzo: Coding Style"
msgstr "Intermezzo: Στυλ Κώδικα"

#: tutorial/controlflow.rst:1076
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"Τώρα που πρόκειται να γράψετε μεγαλύτερα, και πιο σύνθετα κομμάτια της Python, είνι η "
"κατάλληλη στιγμή να μιλήσετε για *στυλ κώδικα*.  Οι περισσότερες γλώσσες μπορούν να γραφτούν "
"(ή πιο συνοπτικές, *μοροφοποιημένες*) σε διαφορετικά στυλ· μερικές είναι πιο ευανάγνωστες από άλλες. "
"Το να διευκολύνετε τους άλλους να διαβάσουν τον κώδικα σας είναι πάντα μια καλή ιδέα και η υιοθέτηση ενός "
"ωραίου στυλ κώδικα βοηθάει πάρα πολύ σε αυτό."

#: tutorial/controlflow.rst:1082
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Για την Python, το :pep:`8` έχει αναδειχθεί ως οδηγός στηλ στον οποίο τηρούν τα περισσότερα έργα· "
"προωθεί ένα πολύ ευανάγνωστο και ευχάριστο στυλ κώδικα.  Κάθε προγραμματιστής Python θα πρέπει να το "
"διαβάσει κάποια στιγμή· εδώ είναι τα πιο σημαντικό σημεία που εξάγονται για εσάς:"

#: tutorial/controlflow.rst:1087
msgid "Use 4-space indentation, and no tabs."
msgstr "Χρησιμοποιήστε εσοχή 4 διαστημάτων και όχι tabs."

#: tutorial/controlflow.rst:1089
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"Τα 4 κενά είναι ένας καλό συμβιβασμό μεταξύ της μικρής εσοχής (επιτρέπει μεγαλύτερο "
"βάθος εμφώλευσης) και της μεγάλης εσοχής (ευκολότερη στην ανάγνωση).  Τα tabs δημιουργούν "
"σύγχυση, και είναι καλύτερο να παραμείνουν απέξω."

#: tutorial/controlflow.rst:1093
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "Τυλίξτε τις γραμμές έτσι ώστε να μην υπερβαίνουν τους 79 χαρακτήρες."

#: tutorial/controlflow.rst:1095
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"Αυτό βοηθά του χρήστες με μικρές οθόνες και καθιστά δυνατή την ύπαρξη πολλών "
"αρχείων κώδικα δίπλα-δίπλα σε μεγαλύτερες οθόνες."

#: tutorial/controlflow.rst:1098
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"Χρησιμοποιείστε κενές γραμμές για να διαχωρίσετε συναρτήσεις και κλάσεις και μεγαλύτερα "
"μπλοκ κώδικα μέσα συναρτήσεις."

#: tutorial/controlflow.rst:1101
msgid "When possible, put comments on a line of their own."
msgstr "Όταν είναι δυνατόν, βάλτε σχόλια σε μια δική τους γραμμή."

#: tutorial/controlflow.rst:1103
msgid "Use docstrings."
msgstr "Χρησιμοποιήστε docstrings."

#: tutorial/controlflow.rst:1105
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"Χρησιμοποιήστε κενά γύρω από τελεστές και μετά από κόμματα, αλλά όχι απευθείας μέσα "
"δε δομές αγκύλων: ``a = f(1, 2) + g(3, 4)``."

#: tutorial/controlflow.rst:1108
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``UpperCamelCase`` for classes and ``lowercase_with_underscores`` for "
"functions and methods.  Always use ``self`` as the name for the first method "
"argument (see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"Ονομάστε τις κλάσεις και τις συναρτήσεις σας με συνέπεια· η σύμβαση είναι "
"να χρησιμοποιείτε ``UpperCamelCase`` για τις κλάσεις και ``lowercase_with_underscores`` "
"για τις συναρτήσεις και τις μεθόδους.  Χρησιμοποιείτε πάντα το ``self`` ως όνομα για το "
"πρώτο όρισμα μεθόδου (δείτε :ref:`tut-firstclasses` για περισσότερα σχετικά με τις κλάσεις και τις μεθόδους)."

#: tutorial/controlflow.rst:1113
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Python's default, UTF-8, or even plain ASCII work best in any "
"case."
msgstr ""
"Μην χρησιμοποιείτε φανταχτερές κωδικοποιήσεις εάν ο κώδικας σας προορίζεται να χρησιμοποιηθεί "
"σε διεθνή περιβάλλοντα.  Η προεπιλογή της Python, UTF-8, ή ακόμα και το απλό ASCII λειτουργούν "
"καλύτερα σε κάθε περίπτωση."

#: tutorial/controlflow.rst:1117
msgid ""
"Likewise, don't use non-ASCII characters in identifiers if there is only the "
"slightest chance people speaking a different language will read or maintain "
"the code."
msgstr ""
"Ομοίως, μη χρησιμοποιείτε χαρακτήρες που δεν είναι ASCII σε αναγνωριστικά εάν υπάρχει "
"μόνο η παραμικρή πιθανότητα οι άνθρωποι που μιλούν διαφορετική γλώσσα να διαβάσουν ή να "
"διατηρήσουν τον κώδικα."

#: tutorial/controlflow.rst:1123
msgid "Footnotes"
msgstr "Υποσημειώσεις"

#: tutorial/controlflow.rst:1124
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"Στην πραγματικότητα, η *κλήση με αναφορά αντικειμένου* θα ήταν μια καλύτερη περιγραφή, καθώς "
"εάν μεταβιβαστεί ένα μεταβλητό αντικείμενο, ο καλών θα δει τυχόν αλλαγές που κάνει ο καλών  σε αυτό "
"(στοιχεία που εισάγονται σε μια λίστα)."

#: tutorial/controlflow.rst:48
msgid "statement"
msgstr "statement"

#: tutorial/controlflow.rst:48
msgid "for"
msgstr "for"

#: tutorial/controlflow.rst:988
msgid "documentation strings"
msgstr "documentation strings"

#: tutorial/controlflow.rst:988
msgid "docstrings"
msgstr "docstrings"

#: tutorial/controlflow.rst:988
msgid "strings, documentation"
msgstr "strings, documentation"

#: tutorial/controlflow.rst:892
msgid "* (asterisk)"
msgstr "* (αστερίσκος)"

#: tutorial/controlflow.rst:936
msgid "in function calls"
msgstr "in function calls"

#: tutorial/controlflow.rst:936
msgid "**"
msgstr "**"

#: tutorial/controlflow.rst:1040
msgid "function"
msgstr "function"

#: tutorial/controlflow.rst:1040
msgid "annotations"
msgstr "annotations"

#: tutorial/controlflow.rst:1040
msgid "->"
msgstr "->"

#: tutorial/controlflow.rst:1040
msgid "function annotations"
msgstr "function annotations"

#: tutorial/controlflow.rst:1040
msgid ": (colon)"
msgstr ": (colon)"

#: tutorial/controlflow.rst:1074
msgid "coding"
msgstr "coding"

#: tutorial/controlflow.rst:1074
msgid "style"
msgstr "style"
